/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bucket as PrismaBucket,
  Reward as PrismaReward,
  Score as PrismaScore,
  Event as PrismaEvent,
} from "@prisma/client";

export class BucketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BucketCountArgs, "select">): Promise<number> {
    return this.prisma.bucket.count(args);
  }

  async buckets(args: Prisma.BucketFindManyArgs): Promise<PrismaBucket[]> {
    return this.prisma.bucket.findMany(args);
  }
  async bucket(
    args: Prisma.BucketFindUniqueArgs
  ): Promise<PrismaBucket | null> {
    return this.prisma.bucket.findUnique(args);
  }
  async createBucket(args: Prisma.BucketCreateArgs): Promise<PrismaBucket> {
    return this.prisma.bucket.create(args);
  }
  async updateBucket(args: Prisma.BucketUpdateArgs): Promise<PrismaBucket> {
    return this.prisma.bucket.update(args);
  }
  async deleteBucket(args: Prisma.BucketDeleteArgs): Promise<PrismaBucket> {
    return this.prisma.bucket.delete(args);
  }

  async findRewards(
    parentId: string,
    args: Prisma.RewardFindManyArgs
  ): Promise<PrismaReward[]> {
    return this.prisma.bucket
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rewards(args);
  }

  async findScores(
    parentId: string,
    args: Prisma.ScoreFindManyArgs
  ): Promise<PrismaScore[]> {
    return this.prisma.bucket
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scores(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.bucket
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
