/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bucket } from "./Bucket";
import { BucketCountArgs } from "./BucketCountArgs";
import { BucketFindManyArgs } from "./BucketFindManyArgs";
import { BucketFindUniqueArgs } from "./BucketFindUniqueArgs";
import { CreateBucketArgs } from "./CreateBucketArgs";
import { UpdateBucketArgs } from "./UpdateBucketArgs";
import { DeleteBucketArgs } from "./DeleteBucketArgs";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { Event } from "../../event/base/Event";
import { BucketService } from "../bucket.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bucket)
export class BucketResolverBase {
  constructor(
    protected readonly service: BucketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "read",
    possession: "any",
  })
  async _bucketsMeta(
    @graphql.Args() args: BucketCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bucket])
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "read",
    possession: "any",
  })
  async buckets(@graphql.Args() args: BucketFindManyArgs): Promise<Bucket[]> {
    return this.service.buckets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bucket, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "read",
    possession: "own",
  })
  async bucket(
    @graphql.Args() args: BucketFindUniqueArgs
  ): Promise<Bucket | null> {
    const result = await this.service.bucket(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bucket)
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "create",
    possession: "any",
  })
  async createBucket(@graphql.Args() args: CreateBucketArgs): Promise<Bucket> {
    return await this.service.createBucket({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bucket)
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async updateBucket(
    @graphql.Args() args: UpdateBucketArgs
  ): Promise<Bucket | null> {
    try {
      return await this.service.updateBucket({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bucket)
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "delete",
    possession: "any",
  })
  async deleteBucket(
    @graphql.Args() args: DeleteBucketArgs
  ): Promise<Bucket | null> {
    try {
      return await this.service.deleteBucket(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reward], { name: "rewards" })
  @nestAccessControl.UseRoles({
    resource: "Reward",
    action: "read",
    possession: "any",
  })
  async findRewards(
    @graphql.Parent() parent: Bucket,
    @graphql.Args() args: RewardFindManyArgs
  ): Promise<Reward[]> {
    const results = await this.service.findRewards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Score], { name: "scores" })
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async findScores(
    @graphql.Parent() parent: Bucket,
    @graphql.Args() args: ScoreFindManyArgs
  ): Promise<Score[]> {
    const results = await this.service.findScores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: Bucket): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
