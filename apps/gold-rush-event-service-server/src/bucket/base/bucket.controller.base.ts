/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BucketService } from "../bucket.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BucketCreateInput } from "./BucketCreateInput";
import { Bucket } from "./Bucket";
import { BucketFindManyArgs } from "./BucketFindManyArgs";
import { BucketWhereUniqueInput } from "./BucketWhereUniqueInput";
import { BucketUpdateInput } from "./BucketUpdateInput";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { RewardWhereUniqueInput } from "../../reward/base/RewardWhereUniqueInput";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { ScoreWhereUniqueInput } from "../../score/base/ScoreWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BucketControllerBase {
  constructor(
    protected readonly service: BucketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bucket })
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBucket(@common.Body() data: BucketCreateInput): Promise<Bucket> {
    return await this.service.createBucket({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bucket] })
  @ApiNestedQuery(BucketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async buckets(@common.Req() request: Request): Promise<Bucket[]> {
    const args = plainToClass(BucketFindManyArgs, request.query);
    return this.service.buckets({
      ...args,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bucket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bucket(
    @common.Param() params: BucketWhereUniqueInput
  ): Promise<Bucket | null> {
    const result = await this.service.bucket({
      where: params,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bucket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBucket(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() data: BucketUpdateInput
  ): Promise<Bucket | null> {
    try {
      return await this.service.updateBucket({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bucket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBucket(
    @common.Param() params: BucketWhereUniqueInput
  ): Promise<Bucket | null> {
    try {
      return await this.service.deleteBucket({
        where: params,
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rewards")
  @ApiNestedQuery(RewardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Reward",
    action: "read",
    possession: "any",
  })
  async findRewards(
    @common.Req() request: Request,
    @common.Param() params: BucketWhereUniqueInput
  ): Promise<Reward[]> {
    const query = plainToClass(RewardFindManyArgs, request.query);
    const results = await this.service.findRewards(params.id, {
      ...query,
      select: {
        bucket: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        rewardAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rewards")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async connectRewards(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        connect: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rewards")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async updateRewards(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        set: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rewards")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async disconnectRewards(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        disconnect: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/scores")
  @ApiNestedQuery(ScoreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async findScores(
    @common.Req() request: Request,
    @common.Param() params: BucketWhereUniqueInput
  ): Promise<Score[]> {
    const query = plainToClass(ScoreFindManyArgs, request.query);
    const results = await this.service.findScores(params.id, {
      ...query,
      select: {
        bucket: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        goldCollected: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async connectScores(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        connect: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async updateScores(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        set: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "Bucket",
    action: "update",
    possession: "any",
  })
  async disconnectScores(
    @common.Param() params: BucketWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        disconnect: body,
      },
    };
    await this.service.updateBucket({
      where: params,
      data,
      select: { id: true },
    });
  }
}
